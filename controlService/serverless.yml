service: controlService

org: greet

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  environment:
    IOT_ENDPOINT: ah2xzj64b7m45-ats.iot.us-east-1.amazonaws.com
    DYNAMODB_TABLE: EnergytableV2
    TURN_OFF_LAMBDA_ARN: arn:aws:lambda:us-east-1:010526250202:function:turnOffPython
    SCHEDULER_ROLE_ARN: arn:aws:iam::010526250202:role/eventbridge-scheduler-lambda-role
  iamRoleStatements:
    - Effect: Allow
      Action:
        - iot:Publish
        - dynamodb:PutItem
      Resource: "*"
    - Effect: Allow
      Action:
        - scheduler:CreateSchedule
        - scheduler:DeleteSchedule
        - scheduler:GetSchedule
      Resource: "*"
    - Effect: Allow
      Action:
        - iam:PassRole
      Resource: arn:aws:iam::010526250202:role/eventbridge-scheduler-lambda-role


functions:
  scheduleCommand:
    handler: handlers/scheduleCommand.scheduleCommand
    events:
      - httpApi:
          path: /device/schedule
          method: post

  turnOffDevice:
    handler: handlers/turnOffDevice.turnOffDevice
  
  sendCommand:
    handler: handlers/sendCommand.sendCommand
    events:
      - httpApi:
          path: /device/command
          method: post

resources:
  Resources:
    SchedulerInvokeRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: schedulerInvokeRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: scheduler.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: invokeLambdaPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource: arn:aws:lambda:us-east-1:010526250202:function:turnOffPython
